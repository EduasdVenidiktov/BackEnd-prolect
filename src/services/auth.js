import createHttpError from 'http-errors';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import { FIFTEEN_MINUTES, THIRTY_DAY } from '../index.js';
import { User } from '../db/models/user.js';
import { Session } from '../db/models/session.js';
import crypto from 'crypto';
import { sendEmail } from '../utils/sendEmail.js';
import { ENV_VARS } from '../constants/index.js';
import { env } from '../utils/env.js';

import handlebars from 'handlebars';
import path from 'node:path';
import fs from 'node:fs/promises';
import { validateGoogleOAuthCode } from '../utils/googleOAuth2.js';

export const registerUser = async (payload) => {
  const encryptedPassword = await bcrypt.hash(payload.password, 10); //The number 10 represents "salt rounds" or "cost factor," determining the number of hashing operations performed. This affects the complexity and time required to generate a password hash.

  return await User.create({
    ...payload,
    password: encryptedPassword,
  });
};

export const loginUser = async ({ email, password }) => {
  const user = await User.findOne({ email });
  if (!user) {
    throw createHttpError(401, 'User not found!'); //not mandatory 'User not found!'
  }

  const isEqual = await bcrypt.compare(password, user.password); //compare password hashes 'payload' with  'user'.
  if (!isEqual) {
    throw createHttpError(401, 'Unauthorized!'); //not mandatory 'Password not correct!'
  }

  await Session.deleteOne({ userId: user._id }); //delete the previous session to avoid conflicts with the new session

  //session, generated new access and refresh tokens
  const accessToken = crypto.randomBytes(30).toString('base64'); // Ensures a high degree of randomness, making it difficult for attackers to predict or generate the same tokens, thus enhancing system security.
  const refreshToken = crypto.randomBytes(30).toString('base64'); //Base64 encoding allows tokens to be easily transmitted over a network since they consist only of characters safe for use in URLs and JSON.

  //function created a new session in the DB. New session include user`s identifier, generated access and refresh tokens, and their respective expiration times. The access token has a limited lifespan (e.g., 15 minutes), while the refresh token lasts longer (e.g., one day).
  return await Session.create({
    userId: user._id,
    accessToken,
    refreshToken,
    accessTokenValidUntil: new Date(Date.now() + FIFTEEN_MINUTES),
    refreshTokenValidUntil: new Date(Date.now() + THIRTY_DAY),
  });
};

export const logoutUser = async (sessionId, refreshToken) => {
  await Session.deleteOne({ _id: sessionId, refreshToken: refreshToken });
};

//function 'createSession' generated new 'accessToken' and 'refreshToken', and sets their expiration periods, returning an object with new tokens and their expiration times.
const createSession = () => {
  const accessToken = crypto.randomBytes(30).toString('base64');
  const refreshToken = crypto.randomBytes(30).toString('base64');

  return {
    accessToken,
    refreshToken,
    accessTokenValidUntil: new Date(Date.now() + FIFTEEN_MINUTES),
    refreshTokenValidUntil: new Date(Date.now() + THIRTY_DAY),
  };
};

//function 'refreshUsersSession' handles the request to update a user session, checks the existence and expiration of the existing session, generates a new session, and stores it in the database.
//'refreshUsersSession' performs the process of updating the session and returns an object representing the new session.
export const refreshUsersSession = async ({ sessionId, refreshToken }) => {
  const session = await Session.findOne({
    //Check refreshUsersSession find in collection 'SessionsCollection' session with the corresponding 'sessionId' and 'refreshToken'.
    _id: sessionId,
    refreshToken,
  });
  if (!session) {
    throw createHttpError(401, 'Session not found');
  }
  //Check, whether the expiration period has passed 'refreshToken'
  const isSessionTokenExpired =
    new Date() > new Date(session.refreshTokenValidUntil); //If the current date exceeds the value of 'refreshTokenValidUntil', it means that the session token has expired.
  if (isSessionTokenExpired) {
    throw createHttpError(401, 'Session token expired');
  }
  const newSession = createSession(); //Create the new session:
  await Session.deleteOne({ _id: sessionId, refreshToken });

  //Check: is there such a user in DB
  const user = await User.findOne(session.userId);
  if (!user) {
    throw createHttpError(401, 'User is not in data!');
  }

  //Create and return the new session in DB used user`s identifier from existing session and the data of the new session generated by the 'createSession' function.
  return await Session.create({
    userId: session.userId,
    ...newSession,
  });
};

export const sendResetPassword = async (email) => {
  const user = await User.findOne({ email });
  if (!user) {
    throw createHttpError(404, 'User not found!');
  }

  const resetToken = jwt.sign(
    {
      sub: user._id,
      email,
    },
    env(ENV_VARS.JWT_SECRET),
    {
      expiresIn: '5m',
    },
  );
  const templateSource = await fs.readFile(
    path.join('src', 'templates', 'reset-password-email.html'),
  );

  const template = handlebars.compile(templateSource.toString());

  const html = template({
    name: user.name,
    link: `${env(ENV_VARS.APP_DOMAIN)}/reset-password?token=${resetToken}`,
  });

  try {
    await sendEmail({
      from: env(ENV_VARS.SMTP_FROM),
      to: email,
      subject: 'Reset your password',
      html,
    });
  } catch (error) {
    console.log(error);

    throw createHttpError(
      500,
      'Failed to send the email, please try again later.',
    );
  }
};

export const resetPassword = async ({ token, password }) => {
  let tokenPayload;
  try {
    tokenPayload = jwt.verify(token, env(ENV_VARS.JWT_SECRET));
  } catch (error) {
    throw createHttpError(401, 'Token is expired or invalid.');
  }

  const user = await User.findById(tokenPayload.sub);
  if (!user) {
    throw createHttpError(404, 'User not found!');
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  await User.findByIdAndUpdate(
    {
      _id: tokenPayload.sub,
      email: tokenPayload.email,
    },
    { password: hashedPassword },
  );

  await Session.deleteMany({ userId: user._id }); //delete current session
};

export const loginOrSignupWithGoogle = async (code) => {
  const loginTicket = await validateGoogleOAuthCode(code);
  const payload = loginTicket.getPayload();

  if (!payload) throw createHttpError(401);

  let user = await User.findOne({ email: payload.email });

  //if user is absent, createing new user
  if (!user) {
    const password = bcrypt.hash(crypto.randomBytes(30).toString('base64'));
    user = await User.create({
      name: payload.given_name + ' ' + payload.family_name,
      email: payload.email,
      password,
    });
  }
  await Session.deleteOne({
    userId: user._id,
  });

  const newSession = createSession();

  return await Session.create({
    userId: user._id,
    ...newSession,
  });
};
